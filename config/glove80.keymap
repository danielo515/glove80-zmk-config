/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/* Custom Defined Behaviors */

#define HRM_QUICK_TAP_MS 0
#define HRM_TAPPING_TERM_MS 250
#define COMBO_TIMEOUT_MS 50
#define MACRO_WAIT_MS 30
#define MACRO_TAP_MS 30

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <HRM_TAPPING_TERM_MS>;
            quick-tap-ms = <HRM_QUICK_TAP_MS>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        fat_arrow: fat_arrow {
            label = "fat_arrow";
            compatible = "zmk,behavior-macro";
            wait-ms = <40>;
            tap-ms = <40>;
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GREATER_THAN>;
        };

        arrow_left: arrow_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp MINUS>;
            label = "ARROW_LEFT";
        };

        arrow_right: arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "ARROW_RIGHT";
        };

        eq_colon: eq_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp EQUAL>;
            label = "EQ_COLON";
        };

        eq_not: eq_not {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
            label = "EQ_NOT";
        };

        enie_macro: enie_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(N) &kp N>;
            label = "ENIE_MACRO";
        };

        alt_tab_enter: alt_tab_toggle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LGUI &kp TAB &to 5>;
            label = "ALT_TAB_TOGGLE";
        };

        alt_tab_exit: alt_tab_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LGUI &tog 5>;
            label = "ALT_TAB_EXIT";
        };

        code_fence: code_fence {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            label = "CODE_FENCE";
        };
    };

    combos {
        compatible = "zmk,combos";

        // Combo positions defined here:
        // https://github.com/moergo-sc/zmk/blob/main/app/boards/arm/glove80/glove80.dtsi#L24-L29

        combo_esc {
            // Left hand, home row middle + index -> escape

            bindings = <&kp ESC>;
            key-positions = <37 38>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_double_quote {
            bindings = <&kp LS(SQT)>;
            key-positions = <36 38>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_rparen {
            bindings = <&kp RPAR>;
            key-positions = <42 43>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <41 43>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_lparen {
            bindings = <&kp LPAR>;
            key-positions = <41 42>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        // Left hand bottom row: text editing

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <47 48>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_copy {
            bindings = <&kp RG(C)>;
            key-positions = <48 49>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <47 49>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_select_all {
            bindings = <&kp RG(A)>;
            key-positions = <47 50>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        combo_paste {
            bindings = <&kp RG(V)>;
            key-positions = <49 50>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        super_paste {
            bindings = <&kp RG(RA(V))>;
            key-positions = <50 51>;
            layers = <0>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <58 59>;
        };

        brace_L {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <59 60>;
        };

        brace_R {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <60 61>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <60 61 59>;
        };

        palote {
            bindings = <&kp PIPE>;
            key-positions = <42 59>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            layers = <0>;
        };

        arroba {
            bindings = <&kp AT_SIGN>;
            key-positions = <24 25>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            layers = <0>;
        };

        spa_tild {
            bindings = <&kp RA(E)>;
            key-positions = <41 30>;
        };

        enie {
            bindings = <&enie_macro>;
            key-positions = <58 40>;
        };

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <41 40>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            layers = <0>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <28 29>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
            layers = <0>;
        };

        alt_control {
            bindings = <&sk LA(LEFT_CONTROL)>;
            key-positions = <25 26>;
        };
    };

    /* Automatically generated keymap */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2    &kp F3   &kp F4    &kp F5                                                                                                              &kp F6           &kp F7               &kp F8    &kp F9    &kp F10
&kp EQUAL   &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                           &kp N6                  &kp N7           &kp N8               &kp N9    &kp N0    &kp MINUS
&kp TAB     &kp Q     &kp W    &kp E     &kp R      &kp T                                                                            &kp Y                   &kp U            &kp I                &kp O     &kp P     &kp BSLH
&kp ESC     &kp A     &lt 3 S  &lt 1 D   &kp F      &kp G                                                                            &ht LS(LC(LG(LALT))) H  &ht RIGHT_ALT J  &ht RIGHT_CONTROL K  &kp L     &kp SEMI  &kp SQT
&kp GRAVE   &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL   &mo LOWER  &kp K_MUTE  &kp LA(E)  &alt_tab_enter  &kp N                   &kp M            &kp COMMA            &kp DOT   &kp FSLH  &kp PG_UP
&magic 2 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &sk LSHFT  &lt 1 BSPC  &sk LGUI   &kp RALT    &lt 3 RET  &lt 4 SPACE                             &kp DOWN         &kp UP               &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                             &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none         &kp PAUSE_BREAK
&trans        &none         &none       &none       &none     &none                                                           &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp PERCENT   &kp PSCRN
&trans        &none         &none       &none       &none     &none                                                           &kp COLON  &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS  &kp SLCK
&trans        &none         &kp LG(S)   &trans      &kp F5    &kp PG_UP                                                       &kp DOT    &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS   &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12   &kp PG_DN  &trans  &trans  &to DEFAULT  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp STAR      &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F11              &trans  &trans  &trans       &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        layer_Symbols {
            bindings = <
&trans  &trans  &trans  &trans            &trans                                                                               &trans       &trans             &trans    &trans       &trans
&trans  &trans  &trans  &trans            &trans      &trans                                                  &trans           &trans       &trans             &trans    &trans       &trans
&trans  &trans  &trans  &kp GREATER_THAN  &trans      &trans                                                  &kp CARET        &eq_colon    &eq_not            &kp PLUS  &kp PERCENT  &trans
&trans  &trans  &none   &kp LESS_THAN     &fat_arrow  &trans                                                  &kp LS(AMPS)     &kp LBKT     &kp RBKT           &kp BSLH  &kp PIPE     &kp SQT
&trans  &trans  &trans  &code_fence       &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp EXCLAMATION  &arrow_left  &arrow_right       &trans    &trans       &trans
&trans  &trans  &trans  &trans            &trans              &trans  &trans  &trans  &trans  &trans  &trans                   &kp HASH     &kp DOUBLE_QUOTES  &trans    &trans       &trans
            >;
        };

        layer_Function {
            bindings = <
&none  &none  &none  &none  &none                                                                     &none         &none          &none    &none  &none
&none  &none  &none  &none  &none  &none                                                      &none   &none         &none          &none    &none  &none
&none  &none  &none  &none  &none  &none                                                      &none   &none         &none          &none    &none  &none
&none  &none  &none  &none  &none  &none                                                      &none   &none         &none          &none    &none  &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &kp C_VOLUME_UP  &none  &none  &kp F5  &kp F2        &kp F12        &kp F19  &none  &none
&none  &none  &none  &none  &none         &none  &none  &none  &kp C_VOL_UP     &none  &none          &kp LC(LEFT)  &kp LC(RIGHT)  &none    &none  &none
            >;
        };

        alt_tab {
            bindings = <
&alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit                                                                                                                          &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit
&alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit                                                                                            &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit
&alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit                                                                                            &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit
&alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit                                                                                            &kp LEFT       &kp LEFT       &kp RIGHT      &kp RIGHT      &alt_tab_exit  &alt_tab_exit
&alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &kp TAB        &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit
&alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit                 &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit                 &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit  &alt_tab_exit
            >;
        };
    };
};
